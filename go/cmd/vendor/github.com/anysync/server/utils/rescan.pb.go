// Code generated by protoc-gen-go.
// source: rescan.proto
// DO NOT EDIT!

/*
Package utils is a generated protocol buffer package.

It is generated from these files:
	rescan.proto

It has these top-level messages:
	UserRequest
	UserAccount
	ActionResponse
	Result
	ModifiedRow
	ModifiedFolder
	ModifiedData
	WriteTask
	ServerFolderUpdates
	BinLogResponse
	ServerSyncResponse
	FileAttribs
	RemoteObject
	Repository
	ShareFolder
	UpdateDatTask
	UploadStagingTask
*/
package utils

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserRequest struct {
	Version  string            `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Server   string            `protobuf:"bytes,2,opt,name=Server" json:"Server,omitempty"`
	UserID   string            `protobuf:"bytes,3,opt,name=UserID" json:"UserID,omitempty"`
	Email    string            `protobuf:"bytes,4,opt,name=Email" json:"Email,omitempty"`
	Auth     string            `protobuf:"bytes,5,opt,name=Auth" json:"Auth,omitempty"`
	DeviceID uint32            `protobuf:"varint,6,opt,name=DeviceID" json:"DeviceID,omitempty"`
	Time     uint32            `protobuf:"varint,7,opt,name=Time" json:"Time,omitempty"`
	Action   string            `protobuf:"bytes,8,opt,name=Action" json:"Action,omitempty"`
	Data     map[string][]byte `protobuf:"bytes,9,rep,name=Data" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data2    map[string][]byte `protobuf:"bytes,10,rep,name=Data2" json:"Data2,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data3    map[string][]byte `protobuf:"bytes,11,rep,name=Data3" json:"Data3,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tasks    []*WriteTask      `protobuf:"bytes,12,rep,name=Tasks" json:"Tasks,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UserRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *UserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserRequest) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *UserRequest) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *UserRequest) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UserRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *UserRequest) GetData() map[string][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserRequest) GetData2() map[string][]byte {
	if m != nil {
		return m.Data2
	}
	return nil
}

func (m *UserRequest) GetData3() map[string][]byte {
	if m != nil {
		return m.Data3
	}
	return nil
}

func (m *UserRequest) GetTasks() []*WriteTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type UserAccount struct {
	ID            int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	AccountType   int32  `protobuf:"varint,2,opt,name=AccountType" json:"AccountType,omitempty"`
	AccountRole   int32  `protobuf:"varint,3,opt,name=AccountRole" json:"AccountRole,omitempty"`
	Organization  string `protobuf:"bytes,4,opt,name=Organization" json:"Organization,omitempty"`
	Group         string `protobuf:"bytes,5,opt,name=Group" json:"Group,omitempty"`
	Email         string `protobuf:"bytes,6,opt,name=Email" json:"Email,omitempty"`
	Name          string `protobuf:"bytes,7,opt,name=Name" json:"Name,omitempty"`
	AccessToken   []byte `protobuf:"bytes,8,opt,name=AccessToken,proto3" json:"AccessToken,omitempty"`
	MaxID         int32  `protobuf:"varint,9,opt,name=MaxID" json:"MaxID,omitempty"`
	LastLogin     uint32 `protobuf:"varint,10,opt,name=LastLogin" json:"LastLogin,omitempty"`
	AuthKey       []byte `protobuf:"bytes,11,opt,name=AuthKey,proto3" json:"AuthKey,omitempty"`
	Server        string `protobuf:"bytes,12,opt,name=Server" json:"Server,omitempty"`
	PubKey        []byte `protobuf:"bytes,13,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	RealAuthKey   []byte `protobuf:"bytes,14,opt,name=RealAuthKey,proto3" json:"RealAuthKey,omitempty"`
	Register      uint32 `protobuf:"varint,15,opt,name=Register" json:"Register,omitempty"`
	Quota         uint32 `protobuf:"varint,16,opt,name=Quota" json:"Quota,omitempty"`
	Phone         string `protobuf:"bytes,17,opt,name=Phone" json:"Phone,omitempty"`
	Bucket        string `protobuf:"bytes,18,opt,name=Bucket" json:"Bucket,omitempty"`
	Expiry        uint32 `protobuf:"varint,19,opt,name=Expiry" json:"Expiry,omitempty"`
	Prefix        string `protobuf:"bytes,20,opt,name=Prefix" json:"Prefix,omitempty"`
	OrderID       string `protobuf:"bytes,21,opt,name=OrderID" json:"OrderID,omitempty"`
	OrderEmail    string `protobuf:"bytes,22,opt,name=OrderEmail" json:"OrderEmail,omitempty"`
	OrderName     string `protobuf:"bytes,23,opt,name=OrderName" json:"OrderName,omitempty"`
	OrderPhone    string `protobuf:"bytes,24,opt,name=OrderPhone" json:"OrderPhone,omitempty"`
	OrderRef      string `protobuf:"bytes,25,opt,name=OrderRef" json:"OrderRef,omitempty"`
	OrderCompany  string `protobuf:"bytes,26,opt,name=OrderCompany" json:"OrderCompany,omitempty"`
	OrderDate     uint32 `protobuf:"varint,27,opt,name=OrderDate" json:"OrderDate,omitempty"`
	OrderReferrer string `protobuf:"bytes,28,opt,name=OrderReferrer" json:"OrderReferrer,omitempty"`
	LastIP        string `protobuf:"bytes,29,opt,name=LastIP" json:"LastIP,omitempty"`
}

func (m *UserAccount) Reset()                    { *m = UserAccount{} }
func (m *UserAccount) String() string            { return proto.CompactTextString(m) }
func (*UserAccount) ProtoMessage()               {}
func (*UserAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserAccount) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserAccount) GetAccountType() int32 {
	if m != nil {
		return m.AccountType
	}
	return 0
}

func (m *UserAccount) GetAccountRole() int32 {
	if m != nil {
		return m.AccountRole
	}
	return 0
}

func (m *UserAccount) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UserAccount) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UserAccount) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserAccount) GetAccessToken() []byte {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *UserAccount) GetMaxID() int32 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

func (m *UserAccount) GetLastLogin() uint32 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

func (m *UserAccount) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *UserAccount) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *UserAccount) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *UserAccount) GetRealAuthKey() []byte {
	if m != nil {
		return m.RealAuthKey
	}
	return nil
}

func (m *UserAccount) GetRegister() uint32 {
	if m != nil {
		return m.Register
	}
	return 0
}

func (m *UserAccount) GetQuota() uint32 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *UserAccount) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserAccount) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *UserAccount) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *UserAccount) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *UserAccount) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *UserAccount) GetOrderEmail() string {
	if m != nil {
		return m.OrderEmail
	}
	return ""
}

func (m *UserAccount) GetOrderName() string {
	if m != nil {
		return m.OrderName
	}
	return ""
}

func (m *UserAccount) GetOrderPhone() string {
	if m != nil {
		return m.OrderPhone
	}
	return ""
}

func (m *UserAccount) GetOrderRef() string {
	if m != nil {
		return m.OrderRef
	}
	return ""
}

func (m *UserAccount) GetOrderCompany() string {
	if m != nil {
		return m.OrderCompany
	}
	return ""
}

func (m *UserAccount) GetOrderDate() uint32 {
	if m != nil {
		return m.OrderDate
	}
	return 0
}

func (m *UserAccount) GetOrderReferrer() string {
	if m != nil {
		return m.OrderReferrer
	}
	return ""
}

func (m *UserAccount) GetLastIP() string {
	if m != nil {
		return m.LastIP
	}
	return ""
}

type ActionResponse struct {
	Time      uint32            `protobuf:"varint,1,opt,name=Time" json:"Time,omitempty"`
	User      string            `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	DeviceID  uint32            `protobuf:"varint,3,opt,name=DeviceID" json:"DeviceID,omitempty"`
	ErrorCode uint32            `protobuf:"varint,4,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
	Action    string            `protobuf:"bytes,5,opt,name=Action" json:"Action,omitempty"`
	Data      map[string][]byte `protobuf:"bytes,6,rep,name=Data" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data2     map[string][]byte `protobuf:"bytes,7,rep,name=Data2" json:"Data2,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data3     map[string][]byte `protobuf:"bytes,8,rep,name=Data3" json:"Data3,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ActionResponse) Reset()                    { *m = ActionResponse{} }
func (m *ActionResponse) String() string            { return proto.CompactTextString(m) }
func (*ActionResponse) ProtoMessage()               {}
func (*ActionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ActionResponse) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ActionResponse) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ActionResponse) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *ActionResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ActionResponse) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ActionResponse) GetData() map[string][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ActionResponse) GetData2() map[string][]byte {
	if m != nil {
		return m.Data2
	}
	return nil
}

func (m *ActionResponse) GetData3() map[string][]byte {
	if m != nil {
		return m.Data3
	}
	return nil
}

type Result struct {
	Title   string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Snippet string `protobuf:"bytes,3,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Result) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Result) GetSnippet() string {
	if m != nil {
		return m.Snippet
	}
	return ""
}

type ModifiedRow struct {
	OperationMode         int32             `protobuf:"varint,1,opt,name=OperationMode" json:"OperationMode,omitempty"`
	Row                   []byte            `protobuf:"bytes,2,opt,name=Row,proto3" json:"Row,omitempty"`
	FileName              string            `protobuf:"bytes,3,opt,name=FileName" json:"FileName,omitempty"`
	Conflict              int32             `protobuf:"varint,4,opt,name=Conflict" json:"Conflict,omitempty"`
	SendBackToClient      bool              `protobuf:"varint,5,opt,name=SendBackToClient" json:"SendBackToClient,omitempty"`
	PreviousIndex         uint32            `protobuf:"varint,6,opt,name=PreviousIndex" json:"PreviousIndex,omitempty"`
	OldFolderHashAndIndex string            `protobuf:"bytes,7,opt,name=OldFolderHashAndIndex" json:"OldFolderHashAndIndex,omitempty"`
	Attribs               map[string][]byte `protobuf:"bytes,8,rep,name=Attribs" json:"Attribs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDir                 bool              `protobuf:"varint,9,opt,name=IsDir" json:"IsDir,omitempty"`
}

func (m *ModifiedRow) Reset()                    { *m = ModifiedRow{} }
func (m *ModifiedRow) String() string            { return proto.CompactTextString(m) }
func (*ModifiedRow) ProtoMessage()               {}
func (*ModifiedRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ModifiedRow) GetOperationMode() int32 {
	if m != nil {
		return m.OperationMode
	}
	return 0
}

func (m *ModifiedRow) GetRow() []byte {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *ModifiedRow) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ModifiedRow) GetConflict() int32 {
	if m != nil {
		return m.Conflict
	}
	return 0
}

func (m *ModifiedRow) GetSendBackToClient() bool {
	if m != nil {
		return m.SendBackToClient
	}
	return false
}

func (m *ModifiedRow) GetPreviousIndex() uint32 {
	if m != nil {
		return m.PreviousIndex
	}
	return 0
}

func (m *ModifiedRow) GetOldFolderHashAndIndex() string {
	if m != nil {
		return m.OldFolderHashAndIndex
	}
	return ""
}

func (m *ModifiedRow) GetAttribs() map[string][]byte {
	if m != nil {
		return m.Attribs
	}
	return nil
}

func (m *ModifiedRow) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

type ModifiedFolder struct {
	FolderHash   string                  `protobuf:"bytes,1,opt,name=FolderHash" json:"FolderHash,omitempty"`
	RelativePath string                  `protobuf:"bytes,2,opt,name=RelativePath" json:"RelativePath,omitempty"`
	ParentHash   string                  `protobuf:"bytes,3,opt,name=ParentHash" json:"ParentHash,omitempty"`
	Rows         map[uint32]*ModifiedRow `protobuf:"bytes,4,rep,name=Rows" json:"Rows,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Offset       uint32                  `protobuf:"varint,5,opt,name=Offset" json:"Offset,omitempty"`
	End          uint32                  `protobuf:"varint,6,opt,name=End" json:"End,omitempty"`
	RepoHash     string                  `protobuf:"bytes,7,opt,name=RepoHash" json:"RepoHash,omitempty"`
	HasThumbnail bool                    `protobuf:"varint,8,opt,name=HasThumbnail" json:"HasThumbnail,omitempty"`
}

func (m *ModifiedFolder) Reset()                    { *m = ModifiedFolder{} }
func (m *ModifiedFolder) String() string            { return proto.CompactTextString(m) }
func (*ModifiedFolder) ProtoMessage()               {}
func (*ModifiedFolder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ModifiedFolder) GetFolderHash() string {
	if m != nil {
		return m.FolderHash
	}
	return ""
}

func (m *ModifiedFolder) GetRelativePath() string {
	if m != nil {
		return m.RelativePath
	}
	return ""
}

func (m *ModifiedFolder) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *ModifiedFolder) GetRows() map[uint32]*ModifiedRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *ModifiedFolder) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ModifiedFolder) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ModifiedFolder) GetRepoHash() string {
	if m != nil {
		return m.RepoHash
	}
	return ""
}

func (m *ModifiedFolder) GetHasThumbnail() bool {
	if m != nil {
		return m.HasThumbnail
	}
	return false
}

type ModifiedData struct {
	Version  string            `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Server   string            `protobuf:"bytes,2,opt,name=Server" json:"Server,omitempty"`
	User     string            `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	Auth     string            `protobuf:"bytes,4,opt,name=Auth" json:"Auth,omitempty"`
	Token    string            `protobuf:"bytes,5,opt,name=Token" json:"Token,omitempty"`
	DeviceID uint32            `protobuf:"varint,6,opt,name=DeviceID" json:"DeviceID,omitempty"`
	Time     uint32            `protobuf:"varint,7,opt,name=Time" json:"Time,omitempty"`
	Notify   bool              `protobuf:"varint,8,opt,name=Notify" json:"Notify,omitempty"`
	Headers  map[string]string `protobuf:"bytes,9,rep,name=Headers" json:"Headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Folders  []*ModifiedFolder `protobuf:"bytes,10,rep,name=Folders" json:"Folders,omitempty"`
	Objects  map[string][]byte `protobuf:"bytes,11,rep,name=Objects" json:"Objects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ModifiedData) Reset()                    { *m = ModifiedData{} }
func (m *ModifiedData) String() string            { return proto.CompactTextString(m) }
func (*ModifiedData) ProtoMessage()               {}
func (*ModifiedData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ModifiedData) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModifiedData) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ModifiedData) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ModifiedData) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *ModifiedData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ModifiedData) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *ModifiedData) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ModifiedData) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

func (m *ModifiedData) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ModifiedData) GetFolders() []*ModifiedFolder {
	if m != nil {
		return m.Folders
	}
	return nil
}

func (m *ModifiedData) GetObjects() map[string][]byte {
	if m != nil {
		return m.Objects
	}
	return nil
}

type WriteTask struct {
	Mode       uint32            `protobuf:"varint,1,opt,name=Mode" json:"Mode,omitempty"`
	FolderHash string            `protobuf:"bytes,2,opt,name=FolderHash" json:"FolderHash,omitempty"`
	Index      uint32            `protobuf:"varint,3,opt,name=Index" json:"Index,omitempty"`
	FileHash   string            `protobuf:"bytes,4,opt,name=FileHash" json:"FileHash,omitempty"`
	Data       string            `protobuf:"bytes,5,opt,name=Data" json:"Data,omitempty"`
	Side       int32             `protobuf:"varint,6,opt,name=Side" json:"Side,omitempty"`
	Bytes      []byte            `protobuf:"bytes,7,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Attribs    map[string][]byte `protobuf:"bytes,8,rep,name=Attribs" json:"Attribs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Time       uint32            `protobuf:"varint,9,opt,name=Time" json:"Time,omitempty"`
	ID         int32             `protobuf:"varint,10,opt,name=ID" json:"ID,omitempty"`
}

func (m *WriteTask) Reset()                    { *m = WriteTask{} }
func (m *WriteTask) String() string            { return proto.CompactTextString(m) }
func (*WriteTask) ProtoMessage()               {}
func (*WriteTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WriteTask) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *WriteTask) GetFolderHash() string {
	if m != nil {
		return m.FolderHash
	}
	return ""
}

func (m *WriteTask) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WriteTask) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *WriteTask) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *WriteTask) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *WriteTask) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *WriteTask) GetAttribs() map[string][]byte {
	if m != nil {
		return m.Attribs
	}
	return nil
}

func (m *WriteTask) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *WriteTask) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type ServerFolderUpdates struct {
	FolderHash string         `protobuf:"bytes,1,opt,name=FolderHash" json:"FolderHash,omitempty"`
	RepoHash   string         `protobuf:"bytes,2,opt,name=RepoHash" json:"RepoHash,omitempty"`
	Logs       []*ModifiedRow `protobuf:"bytes,3,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *ServerFolderUpdates) Reset()                    { *m = ServerFolderUpdates{} }
func (m *ServerFolderUpdates) String() string            { return proto.CompactTextString(m) }
func (*ServerFolderUpdates) ProtoMessage()               {}
func (*ServerFolderUpdates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ServerFolderUpdates) GetFolderHash() string {
	if m != nil {
		return m.FolderHash
	}
	return ""
}

func (m *ServerFolderUpdates) GetRepoHash() string {
	if m != nil {
		return m.RepoHash
	}
	return ""
}

func (m *ServerFolderUpdates) GetLogs() []*ModifiedRow {
	if m != nil {
		return m.Logs
	}
	return nil
}

type BinLogResponse struct {
	FolderUpdates map[string]*ServerFolderUpdates `protobuf:"bytes,1,rep,name=FolderUpdates" json:"FolderUpdates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ServerChanges map[string]*ModifiedFolder      `protobuf:"bytes,2,rep,name=ServerChanges" json:"ServerChanges,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BinLogResponse) Reset()                    { *m = BinLogResponse{} }
func (m *BinLogResponse) String() string            { return proto.CompactTextString(m) }
func (*BinLogResponse) ProtoMessage()               {}
func (*BinLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BinLogResponse) GetFolderUpdates() map[string]*ServerFolderUpdates {
	if m != nil {
		return m.FolderUpdates
	}
	return nil
}

func (m *BinLogResponse) GetServerChanges() map[string]*ModifiedFolder {
	if m != nil {
		return m.ServerChanges
	}
	return nil
}

type ServerSyncResponse struct {
	Props         map[string]string               `protobuf:"bytes,1,rep,name=Props" json:"Props,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FolderUpdates map[string]*ServerFolderUpdates `protobuf:"bytes,2,rep,name=FolderUpdates" json:"FolderUpdates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tasks         []*WriteTask                    `protobuf:"bytes,3,rep,name=Tasks" json:"Tasks,omitempty"`
	TaskTopFolder string                          `protobuf:"bytes,4,opt,name=TaskTopFolder" json:"TaskTopFolder,omitempty"`
	Objects       map[string][]byte               `protobuf:"bytes,5,rep,name=Objects" json:"Objects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Code          int32                           `protobuf:"varint,6,opt,name=Code" json:"Code,omitempty"`
}

func (m *ServerSyncResponse) Reset()                    { *m = ServerSyncResponse{} }
func (m *ServerSyncResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerSyncResponse) ProtoMessage()               {}
func (*ServerSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ServerSyncResponse) GetProps() map[string]string {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *ServerSyncResponse) GetFolderUpdates() map[string]*ServerFolderUpdates {
	if m != nil {
		return m.FolderUpdates
	}
	return nil
}

func (m *ServerSyncResponse) GetTasks() []*WriteTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *ServerSyncResponse) GetTaskTopFolder() string {
	if m != nil {
		return m.TaskTopFolder
	}
	return ""
}

func (m *ServerSyncResponse) GetObjects() map[string][]byte {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *ServerSyncResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type FileAttribs struct {
	Attribs map[string][]byte `protobuf:"bytes,1,rep,name=Attribs" json:"Attribs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FileAttribs) Reset()                    { *m = FileAttribs{} }
func (m *FileAttribs) String() string            { return proto.CompactTextString(m) }
func (*FileAttribs) ProtoMessage()               {}
func (*FileAttribs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FileAttribs) GetAttribs() map[string][]byte {
	if m != nil {
		return m.Attribs
	}
	return nil
}

type RemoteObject struct {
	Name   string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Value  string            `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
	Type   string            `protobuf:"bytes,3,opt,name=Type" json:"Type,omitempty"`
	Root   string            `protobuf:"bytes,4,opt,name=Root" json:"Root,omitempty"`
	Data   map[string]string `protobuf:"bytes,5,rep,name=Data" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Bucket string            `protobuf:"bytes,6,opt,name=Bucket" json:"Bucket,omitempty"`
	Prefix string            `protobuf:"bytes,7,opt,name=Prefix" json:"Prefix,omitempty"`
}

func (m *RemoteObject) Reset()                    { *m = RemoteObject{} }
func (m *RemoteObject) String() string            { return proto.CompactTextString(m) }
func (*RemoteObject) ProtoMessage()               {}
func (*RemoteObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RemoteObject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoteObject) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RemoteObject) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RemoteObject) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *RemoteObject) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RemoteObject) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *RemoteObject) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type Repository struct {
	Name            string          `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Local           string          `protobuf:"bytes,2,opt,name=Local" json:"Local,omitempty"`
	Hash            string          `protobuf:"bytes,3,opt,name=Hash" json:"Hash,omitempty"`
	EncryptionLevel uint32          `protobuf:"varint,4,opt,name=EncryptionLevel" json:"EncryptionLevel,omitempty"`
	Remote          []*RemoteObject `protobuf:"bytes,5,rep,name=Remote" json:"Remote,omitempty"`
	ShareState      int32           `protobuf:"varint,6,opt,name=ShareState" json:"ShareState,omitempty"`
	Includes        string          `protobuf:"bytes,7,opt,name=Includes" json:"Includes,omitempty"`
	Index           uint32          `protobuf:"varint,8,opt,name=Index" json:"Index,omitempty"`
	Owner           string          `protobuf:"bytes,9,opt,name=Owner" json:"Owner,omitempty"`
	ShareID         string          `protobuf:"bytes,10,opt,name=ShareID" json:"ShareID,omitempty"`
	HashSuffix      string          `protobuf:"bytes,11,opt,name=HashSuffix" json:"HashSuffix,omitempty"`
}

func (m *Repository) Reset()                    { *m = Repository{} }
func (m *Repository) String() string            { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()               {}
func (*Repository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetLocal() string {
	if m != nil {
		return m.Local
	}
	return ""
}

func (m *Repository) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Repository) GetEncryptionLevel() uint32 {
	if m != nil {
		return m.EncryptionLevel
	}
	return 0
}

func (m *Repository) GetRemote() []*RemoteObject {
	if m != nil {
		return m.Remote
	}
	return nil
}

func (m *Repository) GetShareState() int32 {
	if m != nil {
		return m.ShareState
	}
	return 0
}

func (m *Repository) GetIncludes() string {
	if m != nil {
		return m.Includes
	}
	return ""
}

func (m *Repository) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Repository) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Repository) GetShareID() string {
	if m != nil {
		return m.ShareID
	}
	return ""
}

func (m *Repository) GetHashSuffix() string {
	if m != nil {
		return m.HashSuffix
	}
	return ""
}

type ShareFolder struct {
	Name            string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Hash            string            `protobuf:"bytes,2,opt,name=Hash" json:"Hash,omitempty"`
	Includes        string            `protobuf:"bytes,3,opt,name=Includes" json:"Includes,omitempty"`
	FolderHash      string            `protobuf:"bytes,4,opt,name=FolderHash" json:"FolderHash,omitempty"`
	Owner           string            `protobuf:"bytes,5,opt,name=Owner" json:"Owner,omitempty"`
	HashSuffix      string            `protobuf:"bytes,6,opt,name=HashSuffix" json:"HashSuffix,omitempty"`
	Expiry          uint32            `protobuf:"varint,7,opt,name=Expiry" json:"Expiry,omitempty"`
	Permission      uint32            `protobuf:"varint,8,opt,name=Permission" json:"Permission,omitempty"`
	MemberKeys      map[string]string `protobuf:"bytes,9,rep,name=MemberKeys" json:"MemberKeys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EncryptionLevel uint32            `protobuf:"varint,10,opt,name=EncryptionLevel" json:"EncryptionLevel,omitempty"`
	ID              string            `protobuf:"bytes,11,opt,name=ID" json:"ID,omitempty"`
}

func (m *ShareFolder) Reset()                    { *m = ShareFolder{} }
func (m *ShareFolder) String() string            { return proto.CompactTextString(m) }
func (*ShareFolder) ProtoMessage()               {}
func (*ShareFolder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ShareFolder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShareFolder) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ShareFolder) GetIncludes() string {
	if m != nil {
		return m.Includes
	}
	return ""
}

func (m *ShareFolder) GetFolderHash() string {
	if m != nil {
		return m.FolderHash
	}
	return ""
}

func (m *ShareFolder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ShareFolder) GetHashSuffix() string {
	if m != nil {
		return m.HashSuffix
	}
	return ""
}

func (m *ShareFolder) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *ShareFolder) GetPermission() uint32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

func (m *ShareFolder) GetMemberKeys() map[string]string {
	if m != nil {
		return m.MemberKeys
	}
	return nil
}

func (m *ShareFolder) GetEncryptionLevel() uint32 {
	if m != nil {
		return m.EncryptionLevel
	}
	return 0
}

func (m *ShareFolder) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type UpdateDatTask struct {
	Time          uint32                          `protobuf:"varint,1,opt,name=Time" json:"Time,omitempty"`
	FolderUpdates map[string]*ServerFolderUpdates `protobuf:"bytes,2,rep,name=FolderUpdates" json:"FolderUpdates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Objects       map[string][]byte               `protobuf:"bytes,3,rep,name=Objects" json:"Objects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ID            int32                           `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	ShareState    int32                           `protobuf:"varint,5,opt,name=ShareState" json:"ShareState,omitempty"`
}

func (m *UpdateDatTask) Reset()                    { *m = UpdateDatTask{} }
func (m *UpdateDatTask) String() string            { return proto.CompactTextString(m) }
func (*UpdateDatTask) ProtoMessage()               {}
func (*UpdateDatTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateDatTask) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UpdateDatTask) GetFolderUpdates() map[string]*ServerFolderUpdates {
	if m != nil {
		return m.FolderUpdates
	}
	return nil
}

func (m *UpdateDatTask) GetObjects() map[string][]byte {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *UpdateDatTask) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateDatTask) GetShareState() int32 {
	if m != nil {
		return m.ShareState
	}
	return 0
}

type UploadStagingTask struct {
	Msg        *ModifiedData `protobuf:"bytes,1,opt,name=Msg" json:"Msg,omitempty"`
	ShareState int32         `protobuf:"varint,2,opt,name=ShareState" json:"ShareState,omitempty"`
	Owner      string        `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
}

func (m *UploadStagingTask) Reset()                    { *m = UploadStagingTask{} }
func (m *UploadStagingTask) String() string            { return proto.CompactTextString(m) }
func (*UploadStagingTask) ProtoMessage()               {}
func (*UploadStagingTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UploadStagingTask) GetMsg() *ModifiedData {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *UploadStagingTask) GetShareState() int32 {
	if m != nil {
		return m.ShareState
	}
	return 0
}

func (m *UploadStagingTask) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "utils.UserRequest")
	proto.RegisterType((*UserAccount)(nil), "utils.UserAccount")
	proto.RegisterType((*ActionResponse)(nil), "utils.ActionResponse")
	proto.RegisterType((*Result)(nil), "utils.Result")
	proto.RegisterType((*ModifiedRow)(nil), "utils.ModifiedRow")
	proto.RegisterType((*ModifiedFolder)(nil), "utils.ModifiedFolder")
	proto.RegisterType((*ModifiedData)(nil), "utils.ModifiedData")
	proto.RegisterType((*WriteTask)(nil), "utils.WriteTask")
	proto.RegisterType((*ServerFolderUpdates)(nil), "utils.ServerFolderUpdates")
	proto.RegisterType((*BinLogResponse)(nil), "utils.BinLogResponse")
	proto.RegisterType((*ServerSyncResponse)(nil), "utils.ServerSyncResponse")
	proto.RegisterType((*FileAttribs)(nil), "utils.FileAttribs")
	proto.RegisterType((*RemoteObject)(nil), "utils.RemoteObject")
	proto.RegisterType((*Repository)(nil), "utils.Repository")
	proto.RegisterType((*ShareFolder)(nil), "utils.ShareFolder")
	proto.RegisterType((*UpdateDatTask)(nil), "utils.UpdateDatTask")
	proto.RegisterType((*UploadStagingTask)(nil), "utils.UploadStagingTask")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SendResult service

type SendResultClient interface {
	GetResult(ctx context.Context, in *ModifiedData, opts ...grpc.CallOption) (*ModifiedData, error)
}

type sendResultClient struct {
	cc *grpc.ClientConn
}

func NewSendResultClient(cc *grpc.ClientConn) SendResultClient {
	return &sendResultClient{cc}
}

func (c *sendResultClient) GetResult(ctx context.Context, in *ModifiedData, opts ...grpc.CallOption) (*ModifiedData, error) {
	out := new(ModifiedData)
	err := grpc.Invoke(ctx, "/utils.SendResult/GetResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SendResult service

type SendResultServer interface {
	GetResult(context.Context, *ModifiedData) (*ModifiedData, error)
}

func RegisterSendResultServer(s *grpc.Server, srv SendResultServer) {
	s.RegisterService(&_SendResult_serviceDesc, srv)
}

func _SendResult_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendResultServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.SendResult/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendResultServer).GetResult(ctx, req.(*ModifiedData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendResult_serviceDesc = grpc.ServiceDesc{
	ServiceName: "utils.SendResult",
	HandlerType: (*SendResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResult",
			Handler:    _SendResult_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rescan.proto",
}

// Client API for SyncResult service

type SyncResultClient interface {
	GetSyncResult(ctx context.Context, in *ModifiedData, opts ...grpc.CallOption) (*ServerSyncResponse, error)
	CallAction(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	RetrieveAccessToken(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	Subscribe(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (SyncResult_SubscribeClient, error)
	SendData(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error)
}

type syncResultClient struct {
	cc *grpc.ClientConn
}

func NewSyncResultClient(cc *grpc.ClientConn) SyncResultClient {
	return &syncResultClient{cc}
}

func (c *syncResultClient) GetSyncResult(ctx context.Context, in *ModifiedData, opts ...grpc.CallOption) (*ServerSyncResponse, error) {
	out := new(ServerSyncResponse)
	err := grpc.Invoke(ctx, "/utils.SyncResult/GetSyncResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncResultClient) CallAction(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := grpc.Invoke(ctx, "/utils.SyncResult/CallAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncResultClient) Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := grpc.Invoke(ctx, "/utils.SyncResult/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncResultClient) Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := grpc.Invoke(ctx, "/utils.SyncResult/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncResultClient) RetrieveAccessToken(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := grpc.Invoke(ctx, "/utils.SyncResult/RetrieveAccessToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncResultClient) Subscribe(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (SyncResult_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SyncResult_serviceDesc.Streams[0], c.cc, "/utils.SyncResult/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncResultSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SyncResult_SubscribeClient interface {
	Recv() (*ActionResponse, error)
	grpc.ClientStream
}

type syncResultSubscribeClient struct {
	grpc.ClientStream
}

func (x *syncResultSubscribeClient) Recv() (*ActionResponse, error) {
	m := new(ActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncResultClient) SendData(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := grpc.Invoke(ctx, "/utils.SyncResult/SendData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SyncResult service

type SyncResultServer interface {
	GetSyncResult(context.Context, *ModifiedData) (*ServerSyncResponse, error)
	CallAction(context.Context, *UserRequest) (*ActionResponse, error)
	Register(context.Context, *UserRequest) (*ActionResponse, error)
	Login(context.Context, *UserRequest) (*ActionResponse, error)
	RetrieveAccessToken(context.Context, *UserRequest) (*ActionResponse, error)
	Subscribe(*UserRequest, SyncResult_SubscribeServer) error
	SendData(context.Context, *UserRequest) (*ActionResponse, error)
}

func RegisterSyncResultServer(s *grpc.Server, srv SyncResultServer) {
	s.RegisterService(&_SyncResult_serviceDesc, srv)
}

func _SyncResult_GetSyncResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncResultServer).GetSyncResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.SyncResult/GetSyncResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncResultServer).GetSyncResult(ctx, req.(*ModifiedData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncResult_CallAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncResultServer).CallAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.SyncResult/CallAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncResultServer).CallAction(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncResult_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncResultServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.SyncResult/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncResultServer).Register(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncResult_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncResultServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.SyncResult/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncResultServer).Login(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncResult_RetrieveAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncResultServer).RetrieveAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.SyncResult/RetrieveAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncResultServer).RetrieveAccessToken(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncResult_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncResultServer).Subscribe(m, &syncResultSubscribeServer{stream})
}

type SyncResult_SubscribeServer interface {
	Send(*ActionResponse) error
	grpc.ServerStream
}

type syncResultSubscribeServer struct {
	grpc.ServerStream
}

func (x *syncResultSubscribeServer) Send(m *ActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SyncResult_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncResultServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.SyncResult/SendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncResultServer).SendData(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncResult_serviceDesc = grpc.ServiceDesc{
	ServiceName: "utils.SyncResult",
	HandlerType: (*SyncResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSyncResult",
			Handler:    _SyncResult_GetSyncResult_Handler,
		},
		{
			MethodName: "CallAction",
			Handler:    _SyncResult_CallAction_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _SyncResult_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SyncResult_Login_Handler,
		},
		{
			MethodName: "RetrieveAccessToken",
			Handler:    _SyncResult_RetrieveAccessToken_Handler,
		},
		{
			MethodName: "SendData",
			Handler:    _SyncResult_SendData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _SyncResult_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rescan.proto",
}

func init() { proto.RegisterFile("rescan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2067 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4f, 0x73, 0x5b, 0x49,
	0x11, 0x8f, 0xfe, 0xd9, 0x56, 0x4b, 0x4a, 0xb2, 0x13, 0x67, 0x79, 0x2b, 0x12, 0x30, 0xaa, 0xdd,
	0xe0, 0x62, 0x29, 0x11, 0xec, 0xad, 0xcd, 0xae, 0x29, 0xaa, 0xb0, 0x2d, 0x6f, 0x62, 0x62, 0xc7,
	0x62, 0xe4, 0xec, 0x5e, 0xb8, 0x3c, 0x4b, 0x63, 0xf9, 0xe1, 0xe7, 0x37, 0x62, 0xde, 0xc8, 0x89,
	0x38, 0xf3, 0x09, 0x38, 0xef, 0x89, 0x2b, 0x37, 0x8e, 0x5c, 0xb9, 0xf0, 0x21, 0x38, 0x70, 0xdb,
	0xcf, 0x40, 0x15, 0x07, 0xaa, 0xa7, 0xe7, 0xbd, 0x37, 0x4f, 0x7a, 0x4e, 0xd0, 0xa6, 0xa8, 0x82,
	0x93, 0xa6, 0x7b, 0xba, 0x7b, 0x7a, 0x7a, 0xba, 0x7f, 0xd3, 0xf3, 0x04, 0x4d, 0x25, 0xe2, 0xa1,
	0x1f, 0x75, 0x27, 0x4a, 0x6a, 0xc9, 0x6a, 0x53, 0x1d, 0x84, 0x71, 0xe7, 0x2f, 0x55, 0x68, 0xbc,
	0x8c, 0x85, 0xe2, 0xe2, 0xb7, 0x53, 0x11, 0x6b, 0xe6, 0xc1, 0xea, 0x97, 0x42, 0xc5, 0x81, 0x8c,
	0xbc, 0xd2, 0x46, 0x69, 0xb3, 0xce, 0x13, 0x92, 0xbd, 0x0f, 0x2b, 0x03, 0xa1, 0xae, 0x85, 0xf2,
	0xca, 0x66, 0xc2, 0x52, 0xc8, 0x47, 0x03, 0x87, 0x3d, 0xaf, 0x42, 0x7c, 0xa2, 0xd8, 0x3a, 0xd4,
	0x0e, 0xae, 0xfc, 0x20, 0xf4, 0xaa, 0x86, 0x4d, 0x04, 0x63, 0x50, 0xdd, 0x9d, 0xea, 0x0b, 0xaf,
	0x66, 0x98, 0x66, 0xcc, 0xda, 0xb0, 0xd6, 0x13, 0xd7, 0xc1, 0x50, 0x1c, 0xf6, 0xbc, 0x95, 0x8d,
	0xd2, 0x66, 0x8b, 0xa7, 0x34, 0xca, 0x9f, 0x06, 0x57, 0xc2, 0x5b, 0x35, 0x7c, 0x33, 0xc6, 0x15,
	0x77, 0x87, 0x1a, 0x5d, 0x5c, 0xa3, 0x15, 0x89, 0x62, 0x8f, 0xa1, 0xda, 0xf3, 0xb5, 0xef, 0xd5,
	0x37, 0x2a, 0x9b, 0x8d, 0xad, 0x07, 0x5d, 0xb3, 0xc3, 0xae, 0xb3, 0xbb, 0x2e, 0x4e, 0x1f, 0x44,
	0x5a, 0xcd, 0xb8, 0x91, 0x64, 0xdb, 0x50, 0xc3, 0xdf, 0x2d, 0x0f, 0x8c, 0xca, 0xc3, 0x1b, 0x54,
	0xb6, 0x48, 0x87, 0x64, 0x13, 0xa5, 0x6d, 0xaf, 0xf1, 0x46, 0xa5, 0x6d, 0x47, 0x69, 0x9b, 0x3d,
	0x82, 0xda, 0xa9, 0x1f, 0x5f, 0xc6, 0x5e, 0xd3, 0x28, 0xdd, 0xb5, 0x4a, 0x5f, 0xa9, 0x40, 0x0b,
	0x9c, 0xe0, 0x34, 0xdd, 0x7e, 0x02, 0xf5, 0xd4, 0x49, 0x76, 0x17, 0x2a, 0x97, 0x62, 0x66, 0x0f,
	0x02, 0x87, 0x18, 0xd4, 0x6b, 0x3f, 0x9c, 0x0a, 0x73, 0x06, 0x4d, 0x4e, 0xc4, 0x4e, 0xf9, 0xb3,
	0x52, 0xfb, 0x33, 0x80, 0xcc, 0xd5, 0x6f, 0xa3, 0xb9, 0xbd, 0xb4, 0x66, 0xe7, 0x4f, 0x2b, 0x94,
	0x3c, 0xbb, 0xc3, 0xa1, 0x9c, 0x46, 0x9a, 0xdd, 0x86, 0xf2, 0x61, 0xcf, 0xa8, 0xd6, 0x78, 0xf9,
	0xb0, 0xc7, 0x36, 0xa0, 0x61, 0xa7, 0x4e, 0x67, 0x13, 0xd2, 0xaf, 0x71, 0x97, 0xe5, 0x48, 0x70,
	0x19, 0x0a, 0x93, 0x41, 0x99, 0x04, 0xb2, 0x58, 0x07, 0x9a, 0x27, 0x6a, 0xec, 0x47, 0xc1, 0xef,
	0x7c, 0x73, 0xe4, 0x94, 0x4d, 0x39, 0x1e, 0x7a, 0xf8, 0x54, 0xc9, 0xe9, 0xc4, 0x66, 0x15, 0x11,
	0x59, 0x02, 0xae, 0xcc, 0x25, 0xe0, 0x0b, 0xdf, 0x26, 0x54, 0x9d, 0x9b, 0xb1, 0xf5, 0x42, 0xc4,
	0xf1, 0xa9, 0xbc, 0x14, 0x94, 0x55, 0x4d, 0xee, 0xb2, 0xd0, 0xd6, 0xb1, 0xff, 0xfa, 0xb0, 0xe7,
	0xd5, 0x8d, 0x87, 0x44, 0xb0, 0x07, 0x50, 0x3f, 0xf2, 0x63, 0x7d, 0x24, 0xc7, 0x41, 0xe4, 0x81,
	0xc9, 0xd0, 0x8c, 0x81, 0xa5, 0x84, 0xe9, 0xfd, 0x5c, 0xcc, 0xbc, 0x86, 0xb1, 0x98, 0x90, 0x4e,
	0x29, 0x35, 0xe7, 0x4b, 0xa9, 0x3f, 0x3d, 0x43, 0x85, 0x96, 0x51, 0xb0, 0x14, 0xfa, 0xc7, 0x85,
	0x1f, 0x26, 0xd6, 0x6e, 0x93, 0x7f, 0x0e, 0x0b, 0x4b, 0x88, 0x8b, 0x71, 0x10, 0x6b, 0xa1, 0xbc,
	0x3b, 0x54, 0x42, 0x09, 0x8d, 0xbe, 0xff, 0x6a, 0x2a, 0xb5, 0xef, 0xdd, 0x35, 0x13, 0x44, 0x20,
	0xb7, 0x7f, 0x21, 0x23, 0xe1, 0xbd, 0x47, 0xd1, 0x31, 0x04, 0x7a, 0xb0, 0x37, 0x1d, 0x5e, 0x0a,
	0xed, 0x31, 0xf2, 0x8c, 0x28, 0xe4, 0x1f, 0xbc, 0x9e, 0x04, 0x6a, 0xe6, 0xdd, 0x33, 0x46, 0x2c,
	0x65, 0x3c, 0x56, 0xe2, 0x3c, 0x78, 0xed, 0xad, 0x93, 0x3c, 0x51, 0xb8, 0xf7, 0x13, 0x35, 0x32,
	0xa8, 0x70, 0x9f, 0x60, 0xc4, 0x92, 0xec, 0x7b, 0x00, 0x66, 0x48, 0x47, 0xf3, 0xbe, 0x99, 0x74,
	0x38, 0x18, 0x53, 0x43, 0x99, 0x43, 0xfa, 0x8e, 0x99, 0xce, 0x18, 0xa9, 0x36, 0xb9, 0xee, 0x39,
	0xda, 0xe4, 0x7f, 0x1b, 0xd6, 0x0c, 0xc5, 0xc5, 0xb9, 0xf7, 0x81, 0x99, 0x4d, 0x69, 0xca, 0xa4,
	0x91, 0x50, 0xfb, 0xf2, 0x6a, 0xe2, 0x47, 0x33, 0xaf, 0x9d, 0x64, 0x52, 0xc6, 0x4b, 0x57, 0xef,
	0xf9, 0x5a, 0x78, 0xdf, 0xa5, 0x13, 0x4d, 0x19, 0xec, 0x43, 0x68, 0x25, 0xd6, 0x84, 0x52, 0x42,
	0x79, 0x0f, 0x8c, 0x89, 0x3c, 0x13, 0x63, 0x82, 0x49, 0x70, 0xd8, 0xf7, 0x1e, 0x52, 0x4c, 0x88,
	0xea, 0xfc, 0xbd, 0x02, 0xb7, 0x09, 0xa9, 0xb8, 0x88, 0x27, 0x32, 0x8a, 0x45, 0x8a, 0x6e, 0x25,
	0x07, 0xdd, 0x18, 0x54, 0xb1, 0xa6, 0x2c, 0xca, 0x9a, 0x71, 0x0e, 0x21, 0x2b, 0x73, 0x08, 0xf9,
	0x00, 0xea, 0x07, 0x4a, 0x49, 0xb5, 0x2f, 0x47, 0xc2, 0x54, 0x47, 0x8b, 0x67, 0x0c, 0x07, 0x2b,
	0x6b, 0x39, 0xac, 0xdc, 0xb6, 0x58, 0xb9, 0x62, 0xe0, 0xe8, 0xfb, 0x16, 0x8e, 0xf2, 0xee, 0x2d,
	0xc0, 0xe5, 0xa7, 0x09, 0x5c, 0xae, 0x1a, 0xad, 0x8d, 0x9b, 0xb5, 0xf2, 0x88, 0xf9, 0x69, 0x82,
	0x98, 0x6b, 0x6f, 0xd3, 0xcb, 0x81, 0xe6, 0xff, 0x17, 0x18, 0xfe, 0x12, 0x56, 0xb8, 0x88, 0xa7,
	0xa1, 0x46, 0x19, 0x1d, 0xe8, 0x50, 0x58, 0x3d, 0x22, 0xd0, 0xd6, 0x54, 0x85, 0xf6, 0x58, 0x71,
	0x88, 0x45, 0x12, 0x47, 0xc1, 0x64, 0x22, 0xb4, 0xbd, 0x3a, 0x13, 0xb2, 0xf3, 0x87, 0x0a, 0x34,
	0x8e, 0xe5, 0x28, 0x38, 0x0f, 0xc4, 0x88, 0xcb, 0x57, 0x26, 0xf1, 0x26, 0x42, 0x19, 0xb4, 0x3b,
	0xc6, 0x73, 0x26, 0x8c, 0xcd, 0x33, 0x71, 0x05, 0x2e, 0x5f, 0x59, 0xcf, 0x70, 0x88, 0x79, 0xf3,
	0x45, 0x10, 0x0a, 0x53, 0x4b, 0xb4, 0x44, 0x4a, 0xe3, 0xdc, 0xbe, 0x8c, 0xce, 0xc3, 0x60, 0xa8,
	0x4d, 0xda, 0xd4, 0x78, 0x4a, 0xb3, 0x1f, 0xc1, 0xdd, 0x81, 0x88, 0x46, 0x7b, 0xfe, 0xf0, 0xf2,
	0x54, 0xee, 0x87, 0x81, 0x88, 0xb4, 0xc9, 0x9f, 0x35, 0xbe, 0xc0, 0x47, 0xdf, 0xfa, 0x4a, 0x5c,
	0x07, 0x72, 0x1a, 0x1f, 0x46, 0x23, 0xf1, 0xda, 0x5e, 0xe1, 0x79, 0x26, 0xfb, 0x04, 0xee, 0x9f,
	0x84, 0xa3, 0x2f, 0x64, 0x38, 0x12, 0xea, 0x99, 0x1f, 0x5f, 0xec, 0x46, 0x23, 0x92, 0x26, 0x1c,
	0x2e, 0x9e, 0x64, 0x9f, 0xc3, 0xea, 0xae, 0xd6, 0x2a, 0x38, 0x8b, 0x6d, 0xea, 0x24, 0x89, 0xea,
	0x04, 0xa7, 0x6b, 0x25, 0x28, 0x73, 0x12, 0x79, 0x3c, 0x84, 0xc3, 0xb8, 0x17, 0x28, 0x83, 0xd8,
	0x6b, 0x9c, 0x88, 0xf6, 0x0e, 0x34, 0x5d, 0xf1, 0xa5, 0x0e, 0xf8, 0x1f, 0x65, 0xb8, 0x9d, 0xac,
	0x4b, 0xbe, 0x22, 0x1c, 0x65, 0x5e, 0x5b, 0x2b, 0x0e, 0x07, 0x21, 0x87, 0x8b, 0xd0, 0xd7, 0xc1,
	0xb5, 0xe8, 0xfb, 0xfa, 0xc2, 0x1e, 0x7e, 0x8e, 0x87, 0x36, 0xfa, 0xbe, 0x12, 0x91, 0x36, 0x36,
	0xe8, 0x94, 0x1c, 0x0e, 0x56, 0x2a, 0x97, 0xaf, 0x62, 0xaf, 0x5a, 0x18, 0x00, 0x5a, 0xac, 0x8b,
	0x12, 0xb6, 0x52, 0x71, 0x88, 0x65, 0x7f, 0x72, 0x7e, 0x1e, 0x0b, 0x3a, 0xb6, 0x16, 0xb7, 0x14,
	0xee, 0xf7, 0x20, 0x1a, 0xd9, 0x23, 0xc2, 0x21, 0xdd, 0x1c, 0x13, 0x69, 0x16, 0xa7, 0xb3, 0x48,
	0x69, 0x74, 0xff, 0x99, 0x1f, 0x9f, 0x5e, 0x4c, 0xaf, 0xce, 0x22, 0x44, 0xeb, 0x35, 0x13, 0xca,
	0x1c, 0xaf, 0xfd, 0x1c, 0xea, 0xe9, 0xe2, 0x6e, 0x38, 0x5b, 0x14, 0xce, 0x4d, 0x37, 0x9c, 0x8d,
	0x2d, 0xb6, 0x78, 0x7e, 0x6e, 0x88, 0xbf, 0xa9, 0x40, 0x33, 0x99, 0x32, 0x88, 0xb3, 0x7c, 0x3b,
	0x9a, 0xc0, 0x67, 0xc5, 0x81, 0xcf, 0xa4, 0xe9, 0xac, 0x3a, 0x4d, 0xe7, 0x3a, 0xd4, 0xe8, 0xb6,
	0xb7, 0x3d, 0x03, 0xdd, 0xf3, 0xdf, 0xa2, 0x15, 0x7d, 0x21, 0x75, 0x70, 0x3e, 0xb3, 0xb1, 0xb1,
	0x14, 0xdb, 0x81, 0xd5, 0x67, 0xc2, 0x1f, 0x09, 0x15, 0xdb, 0x6e, 0x74, 0x63, 0x6e, 0xe3, 0xb8,
	0xbb, 0xae, 0x15, 0xb1, 0x99, 0x6b, 0x29, 0xf6, 0x13, 0x58, 0xa5, 0x53, 0x8d, 0x6d, 0x5b, 0x7a,
	0xbf, 0xf0, 0xcc, 0x79, 0x22, 0x85, 0x8b, 0x9d, 0x9c, 0xfd, 0x46, 0x0c, 0x75, 0x6c, 0x5b, 0xd2,
	0xc2, 0xc5, 0xac, 0x88, 0x5d, 0xcc, 0x52, 0x58, 0x10, 0xae, 0x17, 0x6f, 0x2b, 0x88, 0xba, 0x8b,
	0x95, 0x3b, 0xd0, 0x74, 0x8d, 0x2e, 0x55, 0x4c, 0x7f, 0x2b, 0x43, 0x3d, 0x6d, 0x7e, 0x31, 0xb4,
	0x29, 0xac, 0xb5, 0xb8, 0x19, 0xcf, 0xd5, 0x56, 0x79, 0xa1, 0xb6, 0xb0, 0xc0, 0x0d, 0x82, 0xd0,
	0x85, 0x48, 0x44, 0x82, 0x78, 0x46, 0xa7, 0x9a, 0x21, 0x9e, 0xd1, 0x60, 0xf6, 0xce, 0xb3, 0x6f,
	0x0f, 0x93, 0x60, 0x0c, 0xaa, 0x83, 0x60, 0x24, 0xcc, 0x61, 0xd7, 0xb8, 0x19, 0xa3, 0xe5, 0xbd,
	0x99, 0x16, 0xb1, 0x39, 0xe9, 0x26, 0x27, 0x82, 0x3d, 0x99, 0xc7, 0xa2, 0x87, 0xf3, 0x3d, 0xfc,
	0x0d, 0x48, 0x94, 0xe4, 0x4d, 0xdd, 0xc9, 0x1b, 0xea, 0x94, 0x21, 0xe9, 0x94, 0xdf, 0x09, 0x97,
	0x66, 0x70, 0x8f, 0x72, 0x9f, 0x82, 0xf3, 0x72, 0x32, 0xf2, 0xd1, 0xdf, 0xb7, 0x61, 0x93, 0x5b,
	0xf8, 0xe5, 0xb9, 0xc2, 0x7f, 0x04, 0xd5, 0x23, 0x39, 0x8e, 0xbd, 0x8a, 0xd9, 0x68, 0x51, 0xd1,
	0x9a, 0xf9, 0xce, 0x37, 0x65, 0xb8, 0xbd, 0x17, 0x44, 0x47, 0x72, 0x9c, 0xb6, 0x34, 0x2f, 0xa0,
	0x95, 0xf3, 0xc3, 0x2b, 0x19, 0x1b, 0x9b, 0xd6, 0x46, 0x5e, 0xba, 0x9b, 0x13, 0xa5, 0xb8, 0xe5,
	0xd5, 0xd1, 0x1e, 0xed, 0x6e, 0xff, 0xc2, 0x8f, 0xc6, 0x22, 0xf6, 0xca, 0x6f, 0xb2, 0x97, 0x13,
	0xb5, 0xf6, 0x72, 0xbc, 0xf6, 0xaf, 0x81, 0x2d, 0x2e, 0x5a, 0x10, 0xef, 0xc7, 0x79, 0xe0, 0x6a,
	0xdb, 0xf5, 0x0a, 0x22, 0xed, 0x96, 0xc4, 0x57, 0xc0, 0x16, 0x5d, 0x28, 0xb0, 0xfe, 0x71, 0xde,
	0xfa, 0x0d, 0x15, 0xee, 0x1c, 0xf2, 0xd7, 0xd5, 0xc4, 0xf2, 0x60, 0x16, 0x0d, 0xd3, 0x68, 0xef,
	0x40, 0xad, 0xaf, 0xe4, 0x24, 0x89, 0xf2, 0x87, 0x39, 0x2f, 0x5d, 0xc9, 0xae, 0x11, 0xb3, 0xdd,
	0x95, 0x19, 0x33, 0x3e, 0x7f, 0x52, 0x14, 0xd9, 0x1f, 0xdf, 0x6c, 0xe3, 0xed, 0xa7, 0x95, 0x3e,
	0x73, 0x2b, 0x6f, 0x7c, 0xe6, 0x62, 0xd3, 0x80, 0x83, 0x53, 0x39, 0x21, 0x7d, 0x5b, 0xab, 0x79,
	0x26, 0xfb, 0x45, 0x06, 0x6c, 0x35, 0x63, 0xef, 0xd1, 0xcd, 0xbe, 0x15, 0xc2, 0x1b, 0xd6, 0x9e,
	0xe9, 0x8b, 0x6d, 0x79, 0xe3, 0x18, 0x5b, 0xbc, 0x2c, 0x18, 0x4b, 0x01, 0xde, 0x7f, 0x37, 0x77,
	0xde, 0x05, 0x4e, 0x7f, 0x5f, 0x82, 0x06, 0xe2, 0x5c, 0x82, 0x39, 0x4e, 0xe3, 0x54, 0xca, 0xf5,
	0x0d, 0x8e, 0x50, 0x31, 0x5c, 0xbd, 0x13, 0x14, 0xfd, 0xab, 0x84, 0x0d, 0xcf, 0x95, 0xd4, 0x82,
	0x76, 0x92, 0xbe, 0xb6, 0x4b, 0xce, 0x6b, 0x7b, 0x1d, 0x6a, 0x5f, 0xba, 0xf1, 0x35, 0x84, 0x41,
	0xc9, 0xd9, 0x24, 0x69, 0x53, 0xcd, 0x18, 0x79, 0x5c, 0x4a, 0x9d, 0xdc, 0xdb, 0x38, 0x66, 0x3f,
	0x4d, 0x41, 0xdc, 0xc5, 0x60, 0x77, 0xd1, 0x85, 0x67, 0x4b, 0xf6, 0xa8, 0x5d, 0x99, 0x7f, 0xd4,
	0xda, 0xc7, 0xeb, 0xaa, 0xfb, 0x78, 0x5d, 0xea, 0xd9, 0xe1, 0xe6, 0x47, 0xe7, 0xaf, 0x65, 0x00,
	0xc4, 0xd0, 0x38, 0xd0, 0x52, 0xcd, 0x6e, 0xda, 0xfc, 0x91, 0x1c, 0xfa, 0xc9, 0x3b, 0x80, 0x08,
	0x94, 0x74, 0xba, 0x3f, 0x33, 0x66, 0x9b, 0x70, 0xe7, 0x20, 0x1a, 0xaa, 0xd9, 0x04, 0xfb, 0xfb,
	0x23, 0x71, 0x2d, 0x42, 0xfb, 0xba, 0x9b, 0x67, 0xb3, 0x8f, 0xf1, 0xe5, 0x81, 0xfb, 0xb7, 0x41,
	0xb9, 0x57, 0x10, 0x14, 0x6e, 0x45, 0xf0, 0x5a, 0x18, 0x5c, 0xf8, 0x4a, 0x0c, 0x34, 0x3e, 0x71,
	0xa9, 0x2e, 0x1c, 0x0e, 0x5e, 0x0b, 0x87, 0xd1, 0x30, 0x9c, 0x8e, 0xec, 0xfd, 0x57, 0xe7, 0x29,
	0x9d, 0x5d, 0xb9, 0x6b, 0xee, 0x95, 0xbb, 0x0e, 0xb5, 0x93, 0x57, 0x91, 0xa0, 0x4e, 0xbb, 0xce,
	0x89, 0xc0, 0xce, 0xcd, 0x58, 0xb5, 0xd7, 0x5c, 0x9d, 0x27, 0x24, 0x7a, 0x80, 0x1b, 0x1c, 0x4c,
	0xcf, 0x31, 0xf4, 0x0d, 0xba, 0x98, 0x32, 0x4e, 0xe7, 0xeb, 0x0a, 0x34, 0x8c, 0xac, 0x45, 0x81,
	0xa2, 0x30, 0x26, 0x01, 0x2b, 0x3b, 0x01, 0x73, 0x3d, 0xaf, 0xcc, 0x79, 0x9e, 0xbf, 0x0c, 0xab,
	0x45, 0xcd, 0x04, 0xed, 0xa1, 0xe6, 0xee, 0x21, 0xef, 0xe9, 0xca, 0xbc, 0xa7, 0xce, 0x57, 0x91,
	0xd5, 0xdc, 0x57, 0x11, 0x6c, 0xe9, 0x85, 0xba, 0x0a, 0xe2, 0x38, 0xf9, 0x48, 0xd9, 0xe2, 0x0e,
	0x87, 0xed, 0x01, 0x1c, 0x8b, 0xab, 0x33, 0xa1, 0x9e, 0x8b, 0x59, 0xd2, 0x20, 0x76, 0x12, 0x90,
	0xc8, 0x76, 0xde, 0xcd, 0x84, 0x28, 0x9d, 0x1d, 0xad, 0xa2, 0xf4, 0x80, 0xe2, 0xf4, 0xa0, 0x5e,
	0x83, 0xe2, 0x8c, 0xbd, 0xc6, 0xcf, 0xe1, 0xce, 0x9c, 0xe1, 0xa5, 0x92, 0xfc, 0x9f, 0x65, 0x68,
	0x11, 0x7a, 0xf5, 0x7c, 0x9d, 0x74, 0x6f, 0x0b, 0x5f, 0x31, 0x8e, 0x8b, 0x2f, 0x97, 0x1f, 0x26,
	0x1f, 0x4b, 0x5d, 0x03, 0xff, 0xc1, 0xbd, 0xf2, 0xb3, 0xec, 0x26, 0xa0, 0x9b, 0xe5, 0x07, 0x85,
	0x86, 0x8a, 0x2f, 0x01, 0x0a, 0x40, 0x35, 0xfd, 0x2c, 0x99, 0x2f, 0x81, 0xda, 0x7c, 0x09, 0xfc,
	0x0f, 0xc3, 0xfc, 0x04, 0xde, 0x7b, 0x39, 0x09, 0xa5, 0x3f, 0x1a, 0x68, 0x7f, 0x1c, 0x44, 0x63,
	0x13, 0xfe, 0x8f, 0xa0, 0x72, 0x1c, 0x8f, 0x8d, 0x81, 0xac, 0xf6, 0xdd, 0xd6, 0x9f, 0xe3, 0xfc,
	0xdc, 0xae, 0xcb, 0x0b, 0x85, 0xbf, 0x0e, 0x35, 0x69, 0x4a, 0x80, 0x6a, 0x87, 0x88, 0xad, 0x03,
	0x00, 0x7c, 0xf1, 0xdb, 0x2f, 0x1b, 0x4f, 0xa0, 0xfe, 0x54, 0x68, 0x4b, 0x14, 0x2d, 0xd5, 0x2e,
	0x62, 0x76, 0x6e, 0x6d, 0xfd, 0xb9, 0x02, 0x60, 0xaf, 0x6b, 0x54, 0xdd, 0x85, 0xd6, 0x53, 0xa1,
	0x1d, 0x46, 0xa1, 0xad, 0x0f, 0x6e, 0xbc, 0xed, 0x3b, 0xb7, 0xd8, 0xe7, 0x00, 0xfb, 0x7e, 0x18,
	0xda, 0xcf, 0x59, 0x6c, 0xf1, 0x23, 0x7c, 0xfb, 0x7e, 0xe1, 0x67, 0xa6, 0xce, 0x2d, 0xf6, 0x24,
	0xfb, 0x58, 0xba, 0x9c, 0xe2, 0x27, 0x08, 0xde, 0xe3, 0x60, 0xc9, 0xe5, 0xf6, 0xe0, 0x1e, 0x17,
	0x5a, 0x05, 0xe2, 0x5a, 0xb8, 0x9f, 0x94, 0x97, 0xb2, 0xb1, 0x03, 0xf5, 0xc1, 0xf4, 0x2c, 0x1e,
	0xaa, 0xe0, 0x4c, 0x2c, 0xa5, 0xf9, 0xb8, 0x84, 0xdb, 0xc5, 0x23, 0xa4, 0xe7, 0xce, 0x12, 0xaa,
	0x7b, 0x1f, 0xc1, 0x9d, 0x40, 0x76, 0xc7, 0x6a, 0x32, 0xec, 0xfa, 0xd1, 0x2c, 0x9e, 0x45, 0xc3,
	0xbd, 0x06, 0x37, 0xff, 0x21, 0xf5, 0x95, 0xd4, 0xb2, 0x5f, 0xfa, 0x63, 0xb9, 0xcc, 0x07, 0x67,
	0x2b, 0xe6, 0x0f, 0xa5, 0xed, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x5b, 0x46, 0x66, 0x60,
	0x1a, 0x00, 0x00,
}
